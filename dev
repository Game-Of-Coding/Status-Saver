#!/data/data/com.termux/files/usr/bin/bash

# Compiles whole android project
compile_proj () {
    clear
    # Generare build and other necessary directrories if they don't exist
    [ ! -d "app/build/bin" ] && mkdir -p app/build/bin
    [ ! -d "app/build/gen" ] && mkdir -p app/build/gen
    [ ! -d "app/build/obj" ] && mkdir -p app/build/obj
    [ ! -f "app/src/main/AndroidManifest.xml" ] && mkdir -p app/src/main/AndroidManifest.xml
    [ ! -d "app/src/main/res" ] && mkdir -p app/src/main/res
    [ ! -d "app/src/main/java" ] && mkdir -p app/src/main/java
    [ ! -d "app/src/main/assets" ] && mkdir -p app/src/main/assets
    
    # Generate R.java for resources
    echo "Generating <R.java>..."
    aapt package -f -m \
       	-M "app/src/main/AndroidManifest.xml" \
       	-J "app/build/gen" \
       	-S "app/src/main/res"
    if [ $? -ne 0 ]
    then
	echo "--------------------------"
	return -1
    fi
    printf "done\n\n"

    # Compile java files
    echo "Compile <java> code..."
    ecj -d app/build/obj app/build/gen app/src/main/java
    if [ $? -ne 0 ]
    then
	return -1
    fi
    printf "done\n\n"

    # Convert java bite code to dx
    echo "Dexing <java> code..."
    dx --dex --output=app/build/bin/classes.dex app/build/obj
    if [ $? -ne 0 ]
    then
	echo "--------------------------"
	return -1
    fi
    printf "done\n\n"

    # Create resource.apk from res folder
    echo "Creating <resources> archive..."
    aapt package -f \
	 --min-sdk-version 19 \
	 --target-sdk-version 29 \
       	-M app/src/main/AndroidManifest.xml \
       	-S app/src/main/res \
       	-A app/src/main/assets \
       	-F app/build/bin/"resources.apk"
    if [ $? -ne 0 ]
    then
	echo "--------------------------"
	return -1
    fi
    printf "done\n\n"

    cd app/build/bin
    # Add generated dex file to resources
    echo "Generating <apk> file..."
    aapt add -f "resources.apk" "classes.dex"
    if [ $? -ne 0 ]
    then
	echo "--------------------------"
	return -1
    fi
    cp resources.apk app-unsigned.apk
    printf "done\n\n"

    # Sign apk file
    echo "Signing <apk> file..."
    apksigner -p "gameofcoding" "app-debug.key" "app-unsigned.apk" "app-signed.apk"
    if [ $? -ne 0 ]
    then
	echo "--------------------------"
	return -1
    fi
    printf "done\n\n"

    # Prompt for install
    echo "Installing <apk> file..."
    cp app-signed.apk /sdcard/SickBoyDir/temp
    am broadcast \
       -a com.gameofcoding.devcolleague.INSTALL_APP \
       --es app_path "/sdcard/SickBoyDir/temp/app-signed.apk" \
       -n com.gameofcoding.devcolleague/.broadcasts.HelperBroadcastsReceiver > /dev/null
    printf "done\n\n"
    cd ../../..
}

# Uploads proj
upload_proj () {
    printf 'Copying project...'
    # Remove prevoius source code
    rm -r "$1/source/"*
    # Copy source code to external directory
    cp -r * "$1/source"
    cd "$1/source"
    # Remove this file 'dev' and copy file 'remote_dev' to copied source code
    rm dev
    cp ~/.android/assets/remote_dev ./dev
    printf 'Done\n\n'
    
    # Commit and push changes to remote repository
    echo '---------Uploading-----------'
    git add -A
    git commit -m "commit at $(date  +"%I:%M %p")"
    git push -f
    echo '-----------Done--------------'
}

# Downloads output of proj
download_outputs () {
    # Download Outputs
    echo "===============Downloading outputs============"
    cd "$1/outputs"
    git pull
    echo "=============================================="

    # Copy files to internal storage.
    cp -r * /sdcard/SickBoyDir/temp
}


# Installs app
install_app () { 
    # Prompt for install
    echo "Installing..."
    am broadcast \
       -a com.gameofcoding.devcolleague.INSTALL_APP \
       --es app_path "/sdcard/SickBoyDir/temp/app-debug.apk" \
       -n com.gameofcoding.devcolleague/.broadcasts.HelperBroadcastsReceiver > /dev/null
    printf "Done\n\n"
}

# Shows problems like errors, lints, etc.
show_probs () {
    # Show probs
    echo "Showing probs..."
    am broadcast \
       -a com.gameofcoding.devcolleague.SHOW_PROBS \
       -n com.gameofcoding.devcolleague/.broadcasts.HelperBroadcastsReceiver > /dev/null
    printf "Done\n\n"
}
#####################################

# Get name and external dir of project
PROJECT_NAME=$(basename "$PWD")
PROJ_EXT_DIR="$HOME/.android/projs/Status Saver"

case $1 in
    compile)
	compile_proj "$PROJECT_NAME"
	;;
    up | upload)
	upload_proj "$PROJ_EXT_DIR"
	;;
    down | download)
	download_outputs "$PROJ_EXT_DIR" "$PROJECT_NAME"
	;;
    probs | show_probs)
	if [ "$2" == "true" ]; then
	     download_outputs "$PROJ_EXT_DIR" "$PROJECT_NAME"
	fi
	show_probs
	;;
    install | install_app)
	if [ "$2" == "true" ]; then
	     download_outputs "$PROJ_EXT_DIR" "$PROJECT_NAME"
	fi
	install_app "$PROJECT_NAME"
	;;
    *)
	printf "Falied to manipulate given argument '$1'.\n"
esac
